// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;

import "./User.tsol";

contract bank {
    //owner
    uint256 public owner;

    address public user;

  //  uint256 public pubkey;

    //이자율
    uint public interestRate;

    //누적되는 bank의 이익
    uint public bankProfit;

    //
    uint public loanNum;

    //1개의 대출만 허용
    bool public isLoanAvailable;

    event LoanTaken(address user, uint loanNum);
    event RepayfromUserSuccess(address user, uint TotalRepay);
    // 함수 변경자로 owner만이 함수를 사용할 수 있게함.
    modifier onlyOwner {
        require(msg.pubkey() == owner, 1001);
        _;
    }

    // 최초 이자율 설정
    constructor(
        uint _interestRate,
        uint256 _owner
    ) public {
        tvm.accept();

        // there is no msg.sender inside the constructor because this contract was deployed by external message.
        // So you can take an argument from a constructor '_owner'

        owner = _owner;
        interestRate = _interestRate;
//        configuredInterestRate(_interestRate);
        isLoanAvailable = true;
    }

    function configuredInterestRate(uint _interestRate) external onlyOwner {
        tvm.accept();
        interestRate = _interestRate;
    }

    function loan(uint _loanNum) external {

        // when the method are calling from another contract you haven't to use  'tvm.accept()'
//        tvm.accept();

        require(isLoanAvailable, 1002);
        loanNum = _loanNum;
        user = msg.sender;
        isLoanAvailable = false;
        // Check comments in User.borrowMoney
        User(user).loanReceived(loanNum);
        emit LoanTaken(user, loanNum);
    }

    // check comments in User.repayLoan
    function calulating() public view returns (uint) {
        uint TotalRepay;
        TotalRepay = loanNum * (100 + interestRate) / 100;

        return TotalRepay;
    }
    function repaying(uint128 _repayAmount) external {
        require(msg.sender == user, 1003);
//        require(_repayAmount == calulating(), 1009);

        if(_repayAmount != calulating()){
            User(user).repayRejected();
            return;
        }
//        uint TotalRepay;
//        TotalRepay = loanNum * (100 + interestRate) / 100;

        User(user).repayAccepted(_repayAmount);

        bankProfit += (_repayAmount - loanNum);
        loanNum = 0;

        isLoanAvailable = true;


        emit RepayfromUserSuccess(user, _repayAmount);
    }
    function getInterestRate() external view returns (uint) {
        return interestRate;
    }

    function getProfit() external view returns (uint _profit) {
       _profit = bankProfit;
    }
}
