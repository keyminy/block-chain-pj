// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;
import "./~bank.tsol";

contract User {
    // user가 소유한 돈 (대출하면 추가)
    uint public money;

    bank public Bank;

    event BorrowedMoney(address user, uint _amount);
    event LoanRepay(address user, uint repayAmount);
    event receivedSuccess( uint _loanNum);
    event repaySuccess(uint _totalRepayAmount);
    event RepayRejected(string message);

    constructor(
        address _bank,
        uint128 _initialBalance
    ) public {

        // we will need some money for repay borrow amount + interesting rate, so let's imaging we have already had some money
        // 초기 자금을 생성자를 통해서 설정하고 약간의 돈이 있다고 가정.
        money = _initialBalance;
        tvm.accept();
        Bank = bank(_bank);
    }

    function borrowMoney(uint _amount) external {
        tvm.accept();
        Bank.loan(_amount);

        //todo you need to increase money after receiving callback from Bank, so the chain will be looks like this
        //User.borrowMoney -> Bank.loan -> User.loanReceived
        emit BorrowedMoney(msg.sender, _amount);
    }

    // function loanReceived(...) // function that can be called only by Bank contract
    // and only after it we need to increase our money, and emit an event
    function loanReceived(uint _loanNum) external {
        money += _loanNum;
        emit receivedSuccess( _loanNum);
    }

    // Bank contract should includes function for calculating, this function can be called off chain
    // Then User.repayLoan() -> Bank.acceptRepay() (there are some validations) -> User.repayAccepted()/User.repayRejected()
    function repayLoan(
        // better to provide how many tokens you are going to repay
        uint128 _repayAmount
    ) external {
        tvm.accept();

        // check available money, May be you don't have enough money for repaying ?
        require(money > _repayAmount, 1005);

        // then provide counts of tokens to the repaying method
        Bank.repaying(
             _repayAmount
        );

        // That is it for this method, now we are waiting for response from bank contract

//        uint repayAmount;
//        uint Rate = Bank.getInterestRate();
//        repayAmount = money * (100 + Rate) / 100;
//        money = 0;
//        emit LoanRepay(msg.sender, repayAmount);
    }
// User.repayAccepted()/User.repayRejected()
    //    function repayLoan(
    function repayAccepted(uint _totalRepayAmount) external {
        require(_totalRepayAmount <= money, 1008);
        money -= _totalRepayAmount;

        emit repaySuccess(_totalRepayAmount);
    }

    function repayRejected() external {
        emit RepayRejected("Reject!");
    }
    function getMoney() external view returns (uint _money){
        _money = money;
    }
}
